{"version":3,"file":"static/js/544.204906cf.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ListFilms.module.css?fae3","components/ListFilms.jsx","pages/Home/Home.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListFilms_list__kWv3n\",\"link\":\"ListFilms_link__aZAq6\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { fetchFilms } from '../services/api';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './ListFilms.module.css';\n\nfunction ListFilms({ filter = '' }) {\n  const [films, setfilms] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const queryResult = filter ? fetchFilms(filter) : fetchFilms();\n    queryResult\n      .then(result => setfilms(result))\n      .catch(() => toast.error(\"We can't find any film about your reguest\"));\n  }, [filter]);\n\n  return (\n    <ul className={css.list}>\n      {films.map(film => (\n        <li key={film.id} className={css.link}>\n          <Link\n            to={\n              location.pathname === `/`\n                ? `movies/${film.id.toString()}`\n                : `${film.id.toString()}`\n            }\n            state={{ from: location }}\n          >\n            {film.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nListFilms.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default ListFilms;\n","import React from 'react';\nimport ListFilms from 'components/ListFilms';\n\nfunction Home() {\n  return <ListFilms />;\n}\n\nexport default Home;\n","import axios from 'axios';\n\nconst KEY = '7d142b3bdc4d1fae6fc3c3157fc8a204';\nconst URL = 'https://api.themoviedb.org/3';\nconst imgURL = 'https://image.tmdb.org/t/p/w500';\nconst smallImgURL = 'https://image.tmdb.org/t/p/w200';\n\nconst fetchFilms = async (filmName, page = 1) => {\n  const request = filmName\n    ? `${URL}/search/movie?api_key=${KEY}&language=en-US&query=${filmName}&page=${page}`\n    : `${URL}/trending/all/day?api_key=${KEY}&page=${page}`;\n\n  const response = await axios.get(request);\n  const info = results => {\n    return results\n      .filter(\n        ({ poster_path, genre_ids, title, original_title }) =>\n          poster_path && genre_ids && (title || original_title)\n      )\n      .map(({ id, title, original_title }) => ({\n        id,\n        title: title ? title : original_title,\n      }));\n  };\n\n  return info(response.data.results);\n};\n\nconst fetchFilmById = async filmId => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}?api_key=${KEY}&language=en-US`\n  );\n  const {\n    genres,\n    id,\n    poster_path,\n    release_date = '',\n    title,\n    vote_average,\n    overview,\n  } = response.data;\n\n  return {\n    id,\n    poster_path: `${imgURL}${poster_path}`,\n    title: `${title} (${release_date.slice(0, 4)})`,\n    userScore: `${Math.round(vote_average * 10)}%`,\n    overview,\n    genres: genres.map(genre => genre.name).join(' '),\n  };\n};\n\nconst fetchCastFilmById = async filmId => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const { cast } = response.data;\n\n  return cast.map(({ id, name, profile_path, character }) => ({\n    id,\n    name,\n    character,\n    photo: profile_path ? `${smallImgURL}${profile_path}` : null,\n  }));\n};\n\nconst fetchReviewsFilmById = async (filmId, page = 1) => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}/reviews?api_key=${KEY}&language=en-US&page=${page}`\n  );\n  const { results } = response.data;\n\n  return results.map(({ id, author, content }) => ({ id, author, content }));\n};\n\nexport { fetchFilms, fetchFilmById, fetchCastFilmById, fetchReviewsFilmById };\n"],"names":["filter","useState","films","setfilms","location","useLocation","useEffect","fetchFilms","then","result","catch","toast","className","css","map","film","to","pathname","id","toString","state","from","title","KEY","URL","filmName","page","request","axios","response","info","results","poster_path","genre_ids","original_title","data","fetchFilmById","filmId","genres","release_date","vote_average","overview","slice","userScore","Math","round","genre","name","join","fetchCastFilmById","cast","profile_path","character","photo","fetchReviewsFilmById","author","content"],"sourceRoot":""}