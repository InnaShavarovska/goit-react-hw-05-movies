{"version":3,"file":"static/js/597.b0258466.chunk.js","mappings":"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","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import React from 'react';\nimport { fetchCastFilmById } from '../services/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n\n  const params = useParams();\n  const id = params.movieId;\n\n  useEffect(() => {\n    fetchCastFilmById(id).then(result => setCast(result));\n  }, [id]);\n\n  return (\n    <ul>\n      {cast.map(({ id, name, photo, character }) => (\n        <li key={id}>\n          {photo && <img src={photo} alt={name} />}\n          <p>Actor: {name}</p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = '7d142b3bdc4d1fae6fc3c3157fc8a204';\nconst URL = 'https://api.themoviedb.org/3';\nconst imgURL = 'https://image.tmdb.org/t/p/w500';\nconst smallImgURL = 'https://image.tmdb.org/t/p/w200';\n\nconst fetchFilms = async (filmName, page = 1) => {\n  const request = filmName\n    ? `${URL}/search/movie?api_key=${KEY}&language=en-US&query=${filmName}&page=${page}`\n    : `${URL}/trending/all/day?api_key=${KEY}&page=${page}`;\n\n  const response = await axios.get(request);\n  const info = results => {\n    return results\n      .filter(\n        ({ poster_path, genre_ids, title, original_title }) =>\n          poster_path && genre_ids && (title || original_title)\n      )\n      .map(({ id, title, original_title }) => ({\n        id,\n        title: title ? title : original_title,\n      }));\n  };\n\n  return info(response.data.results);\n};\n\nconst fetchFilmById = async filmId => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}?api_key=${KEY}&language=en-US`\n  );\n  const {\n    genres,\n    id,\n    poster_path,\n    release_date = '',\n    title,\n    vote_average,\n    overview,\n  } = response.data;\n\n  return {\n    id,\n    poster_path: `${imgURL}${poster_path}`,\n    title: `${title} (${release_date.slice(0, 4)})`,\n    userScore: `${Math.round(vote_average * 10)}%`,\n    overview,\n    genres: genres.map(genre => genre.name).join(' '),\n  };\n};\n\nconst fetchCastFilmById = async filmId => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const { cast } = response.data;\n\n  return cast.map(({ id, name, profile_path, character }) => ({\n    id,\n    name,\n    character,\n    photo: profile_path ? `${smallImgURL}${profile_path}` : null,\n  }));\n};\n\nconst fetchReviewsFilmById = async (filmId, page = 1) => {\n  const response = await axios.get(\n    `${URL}/movie/${filmId}/reviews?api_key=${KEY}&language=en-US&page=${page}`\n  );\n  const { results } = response.data;\n\n  return results.map(({ id, author, content }) => ({ id, author, content }));\n};\n\nexport { fetchFilms, fetchFilmById, fetchCastFilmById, fetchReviewsFilmById };\n"],"names":["useState","cast","setCast","id","useParams","movieId","useEffect","fetchCastFilmById","then","result","map","name","photo","character","src","alt","KEY","URL","fetchFilms","filmName","page","request","axios","response","info","results","filter","poster_path","genre_ids","title","original_title","data","fetchFilmById","filmId","genres","release_date","vote_average","overview","slice","userScore","Math","round","genre","join","profile_path","fetchReviewsFilmById","author","content"],"sourceRoot":""}